<?php

/**
 * Sasl library.
 *
 * Copyright (c) 2002-2003 Richard Heyes,
 *               2014 Fabian Grutschus
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * o Redistributions of source code must retain the above copyright
 *   notice, this list of conditions and the following disclaimer.
 * o Redistributions in binary form must reproduce the above copyright
 *   notice, this list of conditions and the following disclaimer in the
 *   documentation and/or other materials provided with the distribution.|
 * o The names of the authors may not be used to endorse or promote
 *   products derived from this software without specific prior written
 *   permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * @author Fabian Grutschus <f.grutschus@lubyte.de>
 */

namespace Fabiang\Sasl\Authentication;

use PHPUnit_Framework_TestCase as TestCase;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2014-12-05 at 13:44:41.
 *
 * @coversDefaultClass Fabiang\Sasl\Authentication\DigestMD5
 */
class DigestMD5Test extends TestCase
{

    /**
     * @var DigestMD5
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->object = new DigestMD5;
    }

    /**
     * @covers ::getResponse
     * @covers ::parseChallenge
     * @covers ::checkToken
     * @covers ::getResponseValue
     * @covers ::generateCnonce
     * @covers ::trim
     */
    public function testGetResponseRealm()
    {
         $this->assertRegExp(
            '#^username="authcid",realm="localhost",authzid="authzid",nonce="abcdefghijklmnopqrstuvw",cnonce="[^"]+",nc=00000001,'
            . 'qop=auth,digest-uri="service/hostname",response=[^,]+,maxbuf=65536$#',
            $this->object->getResponse(
                'authcid',
                'pass',
                'realm="localhost",nonce="abcdefghijklmnopqrstuvw",qop="auth",charset=utf-8,algorithm=md5-sess',
                'hostname',
                'service',
                'authzid'
            )
        );
    }

    /**
     * @covers ::getResponse
     * @covers ::checkToken
     * @covers ::parseChallenge
     * @covers ::getResponseValue
     * @covers ::generateCnonce
     * @covers ::trim
     */
    public function testGetResponseNoRealm()
    {
         $this->assertRegExp(
            '#^username="authcid",authzid="authzid",nonce="abcdefghijklmnopqrstuvw",cnonce="[^"]+",nc=00000001,'
            . 'qop=auth,digest-uri="service/hostname",response=[^,]+,maxbuf=65536$#',
            $this->object->getResponse(
                'authcid',
                'pass',
                'nonce="abcdefghijklmnopqrstuvw",qop="auth",charset=utf-8,algorithm=md5-sess,opaque=1,domain=2',
                'hostname',
                'service',
                'authzid'
            )
        );
    }

    /**
     * @covers ::getResponse
     * @covers ::parseChallenge
     * @covers ::checkToken
     * @covers ::getResponseValue
     * @covers ::generateCnonce
     * @covers ::trim
     */
    public function testGetResponseNoAuthzid()
    {
         $this->assertRegExp(
            '#^username="authcid",nonce="abcdefghijklmnopqrstuvw",cnonce="[^"]+",nc=00000001,'
            . 'qop=auth,digest-uri="service/hostname",response=[^,]+,maxbuf=65536$#',
            $this->object->getResponse(
                'authcid',
                'pass',
                'nonce="abcdefghijklmnopqrstuvw",qop="auth",charset=utf-8,algorithm=md5-sess,opaque=1,domain=2',
                'hostname',
                'service'
            )
        );
    }

    /**
     * @expectedException \Fabiang\Sasl\Exception\InvalidArgumentException
     * @covers ::getResponse
     * @covers ::parseChallenge
     */
    public function testGetResponseInvalidChallenge()
    {
        $this->object->getResponse('test', 'test', 'invalid_chalenge', 'host', 'service');
    }

    /**
     * @expectedException \Fabiang\Sasl\Exception\InvalidArgumentException
     * @covers ::getResponse
     * @covers ::parseChallenge
     * @covers ::checkToken
     * @covers ::trim
     */
    public function testParseChallengeNotAllowiedMultiples()
    {
        $this->object->getResponse('test', 'test', 'qop=1,qop=2', 'host', 'service');
    }
}
