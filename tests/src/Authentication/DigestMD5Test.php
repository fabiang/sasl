<?php

namespace Fabiang\Sasl\Authentication;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2014-12-05 at 13:44:41.
 *
 * @coversDefaultClass Fabiang\Sasl\Authentication\DigestMD5
 */
class DigestMD5Test extends \PHPUnit_Framework_TestCase
{

    /**
     * @var DigestMD5
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->object = new DigestMD5;
    }

    /**
     * @covers ::getResponse
     * @covers ::parseChallenge
     * @covers ::getResponseValue
     * @covers ::generateCnonce
     * @covers ::trim
     */
    public function testGetResponseRealm()
    {
         $this->assertRegExp(
            '#^username="authcid",realm="localhost",authzid="authzid",nonce="abcdefghijklmnopqrstuvw",cnonce="[^"]+",nc=00000001,'
            . 'qop=auth,digest-uri="service/hostname",response=[^,]+,maxbuf=65536$#',
            $this->object->getResponse(
                'authcid',
                'pass',
                'realm="localhost",nonce="abcdefghijklmnopqrstuvw",qop="auth",charset=utf-8,algorithm=md5-sess',
                'hostname',
                'service',
                'authzid'
            )
        );
    }

    /**
     * @covers ::getResponse
     * @covers ::parseChallenge
     * @covers ::getResponseValue
     * @covers ::generateCnonce
     * @covers ::trim
     */
    public function testGetResponseNoRealm()
    {
         $this->assertRegExp(
            '#^username="authcid",authzid="authzid",nonce="abcdefghijklmnopqrstuvw",cnonce="[^"]+",nc=00000001,'
            . 'qop=auth,digest-uri="service/hostname",response=[^,]+,maxbuf=65536$#',
            $this->object->getResponse(
                'authcid',
                'pass',
                'nonce="abcdefghijklmnopqrstuvw",qop="auth",charset=utf-8,algorithm=md5-sess,opaque=1,domain=2',
                'hostname',
                'service',
                'authzid'
            )
        );
    }

    /**
     * @covers ::getResponse
     * @covers ::parseChallenge
     * @covers ::getResponseValue
     * @covers ::generateCnonce
     * @covers ::trim
     */
    public function testGetResponseNoAuthzid()
    {
         $this->assertRegExp(
            '#^username="authcid",nonce="abcdefghijklmnopqrstuvw",cnonce="[^"]+",nc=00000001,'
            . 'qop=auth,digest-uri="service/hostname",response=[^,]+,maxbuf=65536$#',
            $this->object->getResponse(
                'authcid',
                'pass',
                'nonce="abcdefghijklmnopqrstuvw",qop="auth",charset=utf-8,algorithm=md5-sess,opaque=1,domain=2',
                'hostname',
                'service'
            )
        );
    }

    /**
     * @expectedException \Fabiang\Sasl\Exception\InvalidArgumentException
     * @covers ::getResponse
     * @covers ::parseChallenge
     */
    public function testGetResponseInvalidChallenge()
    {
        $this->object->getResponse('test', 'test', 'invalid_chalenge', 'host', 'service');
    }

    /**
     * @expectedException \Fabiang\Sasl\Exception\InvalidArgumentException
     * @covers ::getResponse
     * @covers ::parseChallenge
     * @covers ::trim
     */
    public function testParseChallengeNotAllowiedMultiples()
    {
        $this->object->getResponse('test', 'test', 'qop=1,qop=2', 'host', 'service');
    }
}
