<?php

namespace Fabiang\Sasl\Authentication;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2014-12-05 at 15:17:47.
 *
 * @coversDefaultClass Fabiang\Sasl\Authentication\SCRAM
 */
class SCRAMTest extends \PHPUnit_Framework_TestCase
{

    /**
     * @var SCRAM
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->object = new SCRAM('md5');
    }

    /**
     * @covers ::getResponse
     * @covers ::generateCnonce
     * @covers ::formatName
     * @covers ::generateInitialResponse
     * @uses Fabiang\Sasl\Authentication\SCRAM::__construct
     */
    public function testGetInitialResponse()
    {
        $this->assertRegExp(
            '#^n,a=authzid,n=u=2C=3Dser,r=[a-z0-9A-Z=+/]+$#',
            $this->object->getResponse('u,=ser', 'pass', null, 'authzid')
        );
    }

    /**
     * @covers ::getResponse
     * @uses Fabiang\Sasl\Authentication\SCRAM::__construct
     * @uses Fabiang\Sasl\Authentication\SCRAM::formatName
     */
    public function testGetInitialResponseAuthCidIsEmpty()
    {
        $this->assertFalse($this->object->getResponse('', 'pass'));
    }

    /**
     * @covers ::getResponse
     * @covers ::generateResponse
     * @covers ::hi
     * @covers ::getCnonce
     * @uses Fabiang\Sasl\Authentication\SCRAM::__construct
     * @uses Fabiang\Sasl\Authentication\SCRAM::formatName
     * @uses Fabiang\Sasl\Authentication\SCRAM::generateInitialResponse
     * @uses Fabiang\Sasl\Authentication\AbstractAuthentication::generateCnonce
     */
    public function testGetResponseGenerateResponse()
    {
        $this->object->getResponse('user', 'pass', null, 'test');

        $this->assertRegExp(
            '#^c=[a-zA-Z0-9=+/]+,r=[a-zA-Z0-9=+/]+,p=[a-zA-Z0-9=+/]+$#',
            $this->object->getResponse(
                'user',
                'pass',
                'r=' . $this->object->getCnonce() . ',s=abcdefg=,i=2,a=2',
                'authzid'
            )
        );

        $this->assertRegExp('#^[a-zA-Z0-9=+/]+$#', $this->object->getCnonce());
    }

    /**
     * @covers ::generateResponse
     * @uses Fabiang\Sasl\Authentication\SCRAM::__construct
     * @uses Fabiang\Sasl\Authentication\SCRAM::getResponse
     * @uses Fabiang\Sasl\Authentication\SCRAM::formatName
     */
    public function testGetResponseChallengeIsWrong()
    {
        $this->assertFalse($this->object->getResponse(
            'user',
            'pass',
            'test',
            'authzid'
        ));
    }

    /**
     * @covers ::generateResponse
     * @uses Fabiang\Sasl\Authentication\SCRAM::__construct
     * @uses Fabiang\Sasl\Authentication\SCRAM::formatName
     * @uses Fabiang\Sasl\Authentication\SCRAM::generateInitialResponse
     * @uses Fabiang\Sasl\Authentication\AbstractAuthentication::generateCnonce
     * @uses Fabiang\Sasl\Authentication\SCRAM::getResponse
     * @uses Fabiang\Sasl\Authentication\SCRAM::formatName
     * @uses Fabiang\Sasl\Authentication\SCRAM::getCnonce
     */
    public function testGetResponseCnonceInvalid()
    {
        $this->object->getResponse('chris', 'imap', null, 'eleanor.innosoft.com');

        $this->assertFalse($this->object->getResponse(
            'user',
            'pass',
            'r=aaa,s=abcdefg=,i=1,a=2',
            'authzid'
        ));
    }

    /**
     * @covers ::processOutcome
     * @covers ::getAuthMessage
     * @covers ::getSaltedPassword
     * @uses Fabiang\Sasl\Authentication\SCRAM::getResponse
     * @uses Fabiang\Sasl\Authentication\SCRAM::generateResponse
     * @uses Fabiang\Sasl\Authentication\SCRAM::hi
     * @uses Fabiang\Sasl\Authentication\SCRAM::getCnonce
     * @uses Fabiang\Sasl\Authentication\SCRAM::__construct
     * @uses Fabiang\Sasl\Authentication\SCRAM::formatName
     * @uses Fabiang\Sasl\Authentication\SCRAM::generateInitialResponse
     * @uses Fabiang\Sasl\Authentication\AbstractAuthentication::generateCnonce
     */
    public function testProcessOutcome()
    {
        $this->object->getResponse('user', 'pass', null, 'test');
        $this->object->getResponse(
            'user',
            'pass',
            'r=' . $this->object->getCnonce() . ',s=abcdefg=,i=2,a=2',
            'authzid'
        );

        $serverKey       = hash_hmac('md5', "Server Key", $this->object->getSaltedPassword(), true);
        $serverSignature = hash_hmac('md5', $this->object->getAuthMessage(), $serverKey, true);

        $this->assertTrue($this->object->processOutcome('v=' . base64_encode($serverSignature)));
    }
}
